JAVA::
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo apt-get install oracle-java8-set-default
(http://howwhywhat.in/how-to-install-java-8-jdk-8u72-on-ubuntu-14-04)

REDIS::
sudo apt-get install build-essential
sudo apt-get install tcl8.5
wget http://download.redis.io/releases/redis-stable.tar.gz
tar xzf redis-stable.tar.gz
cd redis-stable
make
make test
sudo make install
cd utils
sudo ./install_server.sh
sudo service redis_6379 start
sudo service redis_6379 stop
redis-cli
sudo update-rc.d redis_6379 defaults

(https://www.digitalocean.com/community/tutorials/how-to-install-and-use-redis)

RABBITMQ SERVER::

https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-rabbitmq

COUCH DB:: (Optional, required only in local environment)
sudo apt-get update
sudo apt-get install software-properties-common -y
sudo add-apt-repository ppa:couchdb/stable -y
sudo apt-get update
sudo apt-get remove couchdb couchdb-bin couchdb-common -yf
sudo apt-get install couchdb -y
curl localhost:5984
curl -X PUT localhost:5984/squill
(https://www.digitalocean.com/community/tutorials/how-to-install-couchdb-and-futon-on-ubuntu-14-04)

FFPMPEG::

sudo add-apt-repository ppa:kirillshkrogalev/ffmpeg-next
sudo apt-get update
sudo apt-get install ffmpeg

(http://www.ubuntugeek.com/install-ffmpeg-on-ubuntu-14-10-using-ppa.html)

Xvfb::

sudo aptitude install xvfb 
sudo aptitude install xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic
sudo aptitude install firefox
sudo mod u+s `which Xvfb`

[
Verify :
  https://wiki.cantara.no/display/sysadm/How+to+install+Xvfb+on+Ubuntu
]

Go to the geckodriver releases page (@ https://github.com/mozilla/geckodriver/releases) . Find the latest version of the driver for your platform and download it. For example:
wget https://github.com/mozilla/geckodriver/releases/download/v0.17.0/geckodriver-v0.17.0-linux64.tar.gz
Extract the file with:
tar -xvzf geckodriver*
Make it executable:
chmod +x geckodriver
Add the driver to your PATH so other tools can find it:
export PATH=$PATH:/path-to-extracted-file/geckodriver


KERNEL TUNING::

File Handle Limits
  You can view the current limit on the number of open-files by running:
  cat /proc/sys/fs/file-max
  
  The limit can be raised interactively by running, as root:
  sysctl -w fs.file-max=100000
  
  If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line
  fs.file-max = 100000
  
  Then run the following command to make your change take effect:
  sysctl -p
  
Socket Tuning
  For servers which are handling large numbers of concurent sessions, there are some TCP options that should probabaly be tweaked.

  With a large number of clients comnunicating with your server it wouldn't be unusual to have a 20,000 open sockets or more. To increase that range you append the following to the bottom of /etc/sysctl.conf:
  
  # Use the full range of ports.
	net.ipv4.ip_local_port_range = 1024 65535
	
  You can also increase the recycling time of sockets, avoiding large numbers of them staying in the TIME_WAIT status by adding these values to /etc/sysctl.conf:
  
    # Enables fast recycling of TIME_WAIT sockets.
	# (Use with caution according to the kernel documentation!)
	net.ipv4.tcp_tw_recycle = 1

	# Allow reuse of sockets in TIME_WAIT state for new connections
	# only when it is safe from the network stackâ€™s perspective.
	net.ipv4.tcp_tw_reuse = 1
  
  Finally one problem you'll find is that if a socket is listening and busy a connection-backlog will pile up. The kernel will keep pending connections in a buffer before failing. You can tweak several values to increase the size of the backlog:
  
    #
	# 16MB per socket - which sounds like a lot, but will virtually never
	# consume that much.
	#
	net.core.rmem_max = 16777216
	net.core.wmem_max = 16777216

	# Increase the number of outstanding syn requests allowed.
	# c.f. The use of syncookies.
	net.ipv4.tcp_max_syn_backlog = 4096
	net.ipv4.tcp_syncookies = 1

	# The maximum number of "backlogged sockets".  Default is 128.
	net.core.somaxconn = 1024
	

  The trade-off here is that a connecting client will see a slow connection, but this is almost certainly better than a Connection Refused error.

  Once you've made those additions you can cause them to be loaded by running:
   
  sysctl -p

  Finally if you've changed these limits you will need to restart the associated daemons. (For example "service nginx restart".)

  Process Scheduler

  If you're running a recent ( newer than approx 2.6.32) you've got the 'Completely Fair Scheduler' (CFS) For modern systems serving lots of connections on lots of cores, you may hit issues with process migration.

	There's a kernel parameter that determines how long a migrated process has to be running before the kernel will consider migrating it again to another core. The sysctl name is sched_migration_cost_ns, default value 50000 (that's ns so 0.5 ms): 

   cat /proc/sys/kernel/sched_migration_cost_ns

  (It was renamed from sched_migration_cost at some point between 3.5 and 3.8)

	Forking servers, like PostgreSQL or Apache, scale to much higher levels of concurrent connections if this is made larger, by at least an order of magnitude:

	The limit can be raised interactively by running, as root:   
	
	sysctl -w kernel.sched_migration_cost_ns=5000000
	
	If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line:
	
	kernel.sched_migration_cost_ns = 5000000
	
	Another parameter that can dramatically impact forking servers is sched_autogroup_enabled. This setting groups tasks by TTY, to improve perceived responsiveness on an interactive system. On a server with a long running forking daemon, this will tend to keep child processes from migrating away as soon as they should. It can be disabled like so:
	
	sysctl -w kernel.sched_autogroup_enabled=0
	
	Various PostgreSQL users have reported (on the postgresql performance mailing list) gains up to 30% on highly concurrent workloads on multi-core systems.

    If you wish that change to be made persistently you should append to the file /etc/sysctl.conf the line:
	
	kernel.sched_autogroup_enabled = 0
	
	Then run the following command to make your change take effect:
	
	sysctl -p
	
Filesystem Tuning

    You almost certainly want to disable the "atime" option on your filesystems.

	With this disabled that the last time a file was accessed won't be constantly updated every time you read a file, since this information isn't generally useful inand causes extra disk hits, its typically disabled.

	To do this, just edit /etc/fstab and add "notime" as a mount option for the filesystem. For example
	
	/dev/rd/c0d0p3          /test                    ext3    noatime        1 2
	
	
	http://pka.engr.ccny.cuny.edu/~jmao/node/41
	http://serverfault.com/questions/610806/ufw-how-to-open-port-8080
	http://askubuntu.com/questions/660972/port-forwarding-with-ufw
	https://gist.github.com/kimus/9315140
	http://askubuntu.com/questions/427600/persist-port-routing-from-80-to-8080
	https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-freebsd-server
	https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets
	http://withr.me/add-domain-name-for-your-server-on-digitalocean/
	
	

http://stackoverflow.com/questions/12553350/best-way-to-increase-heap-size-in-catalina-bat-file
http://stackoverflow.com/questions/14375673/how-to-fix-jsp-compiler-warning-one-jar-was-scanned-for-tlds-yet-contained-no-t
	
	